package kyobo.kr.booksmall.controller;


import java.util.Random;

import javax.inject.Inject;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kyobo.kr.booksmall.service.MemberService;
import kyobo.kr.booksmall.vo.MemberVO;

@Controller
@RequestMapping(value="/member")
public class MemberController {
	
	private static final Logger logger = LoggerFactory.getLogger(MemberController.class);

	@Inject
	private MemberService memberservice;
	
	@Autowired//메일샌더 의존성 주입
	private JavaMailSender mailSender;
	
	//회원가입 페이지 이동
	@GetMapping(value="join")
	public void joinGET() {
		logger.info("회원가입 페이지 진입");
	}
	//회원가입 post
	@PostMapping(value="join")
	public String joinPOST(MemberVO member) throws Exception{
		logger.info("join 진입");
		
		//회원가입 서비스 실행
		memberservice.memberJoin(member);
		logger.info("join Service 성공");
		return "redirect:/main";
	}
	//아이디 중복검사
	@PostMapping(value="/memberIdChk")
	@ResponseBody//메서드를 ajax로 요청할때 필수로 들어가야 합니다
	public String memberIdChkPOST(String memberId) throws Exception{
		logger.info("memberIdChk()진입");
		
		int result = memberservice.idCheck(memberId);
		logger.info("결과값 = " + result);
		
		if(result != 0) {
			return "fail"; //중복아이디가 존재
		}else {
			return "success";
		}
	}
	
	//이메일 인증
	@GetMapping(value="/mailCheck")
	@ResponseBody
	public String mailCheckGET(String email) throws Exception{
		//뷰(view)로 부터 넘어온 테이터 확인
		logger.info("이메일 데이터 전송확인");
		logger.info("인증번호 : " + email);
		
		// 인증번호 (난수) 생성
		Random random = new Random();
		int checkNum = random.nextInt(888888) + 111111;
		//111111 ~ 999999 범위의 숫자를 얻기 위해 
		logger.info("인증번호 " + checkNum);
		
		//이메일 보내기
		String setFrom = "anakyn@naver.com";
		String toMail = email;
		String title ="회원가입 인증 이메일 입니다";
		String content = "사이트를 방문해 주셔서 감사합니다"+"<br/>"+"인증번호 는"+
		checkNum + "입니다." + "<br/>" +
		"해당 인증번호를 인증번호 확인란에 기입하여 주세요";
		
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");
			helper.setFrom(setFrom);
			helper.setTo(toMail);
			helper.setSubject(title);
			helper.setText(content, true);
			mailSender.send(message);
			
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		String num = Integer.toString(checkNum);
		return num;
	}
	
	
	//로그인 페이지 이동
	@GetMapping(value="login")
	public void loginGET() {
		logger.info("로그인 페이지 진입");
	}
}
